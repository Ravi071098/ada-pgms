/* Lab 12: Design and implement C/C++ Program for N Queen's problem
using Backtracking.
*/
#include <stdio.h>
#include <stdlib.h>
int count = 0;

void printSolution(int x[], int n)
{
	printf("Solution %d:\n", ++count);
	for (int i = 0; i < n; i++, printf("\n"))
		for (int j = 0; j < n; j++) printf(x[i] == j ? "Q " : "X ");
}
int isValid(int x[], int row, int col)
{
	for (int i = 0; i < row; i++)
		if (x[i] == col || abs(row - i) == abs(col - x[i])) return 0;
	return 1;
}
void solveNQueens(int n, int x[], int row)
{
	if (row == n) return printSolution(x, n);
	for (int col = 0; col < n; col++)
		if (isValid(x, row, col))
			x[row] = col, solveNQueens(n, x, row + 1);
}
int main()
{
	int n;
	printf("Enter number of queens: "), scanf("%d", &n);
	if (n <= 0) return printf("Invalid input!\n"), 1;
	solveNQueens(n, (int[15]) {}, 0);
	printf(count ? "\nTotal Solutions: %d\n" : "No Solution!\n", count
	      );
}
/*
OUTPUT:
Case 1:
Enter number of queens: 4
Solution 1:
X Q X X
X X X Q
Q X X X
X X Q X
Solution 2:
X X Q X
Q X X X
X X X Q
X Q X X
Total Solutions: 2
Case 2:
Enter number of queens: 3
No Solution!*/
