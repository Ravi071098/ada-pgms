
/* 3(b). Design and implement C/C++ Program to find
the transitive closure using Warshal's algorithm
*/
#include <stdio.h>
#define V 4 // Number of vertices
// Function to print the transitive closure matrix
void printMatrix(int reach[V][V])
{
	printf("Transitive Closure of the given graph:\n");
	for (int i = 0; i < V; i++)
	{
		for (int j = 0; j < V; j++)
		{
			printf("%d ", reach[i][j]);
		}
		printf("\n");
	}
}
// Warshallbs Algorithm to compute transitive closure
void warshall(int graph[V][V])
{
	int reach[V][V];

// Step 1: Initialize reachability matrix with input graph
	for (int i = 0; i < V; i++)
		for (int j = 0; j < V; j++)
			reach[i][j] = (graph[i][j] != 0) ? 1 : 0;
// Step 2: Apply Warshallbs algorithm
	for (int k = 0; k < V; k++)
	{
		for (int i = 0; i < V; i++)
		{
			for (int j = 0; j < V; j++)
			{
				reach[i][j] = reach[i][j] || (reach[i][k] && reach[k][
				                                  j]);
			}
		}
	}
// Step 3: Print result
	printMatrix(reach);
}
int main() {
	int graph[V][V] = {
		{0, 1, 0, 1},
		{1, 0, 0, 1},
		{0, 1, 0, 0},


		{0, 0, 1, 0}
	};
	warshall(graph);
	return 0;
}
/* OUTPUT
Transitive Closure of the given graph:
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
This means every node is eventually reachable
from every other node in this graph.
*/
