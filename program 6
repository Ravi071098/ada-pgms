/* 6. Design and implement C/C++ Program to solve 0/1 Knapsack
problem using Dynamic Programming
method.
*/
#include <stdio.h>
#include <string.h>
#define MAX_ITEMS 100
#define MAX_WEIGHT 1000
int dp[MAX_ITEMS][MAX_WEIGHT + 1];
int max(int a, int b)
{
	return (a > b) ? a : b;
}
int knapsack(int wt[], int val[], int n, int W)
{
	if (n == 0 || W == 0)
		return 0;
	if (dp[n][W] != -1)
		return dp[n][W];
	if (wt[n - 1] > W)
		dp[n][W] = knapsack(wt, val, n - 1, W);
	    else
		    dp[n][W] = max(val[n - 1] + knapsack(wt, val, n - 1, W - wt[n
		               - 1]),
		               knapsack(wt, val, n - 1, W) );
	return dp[n][W];
}
int main()
{
	int val[] = {60, 100, 120};
	int wt[] = {10, 20, 30};
	int W = 50;
	int n = sizeof(val) / sizeof(val[0]);
	memset(dp, -1, sizeof(dp));
	int maxProfit = knapsack(wt, val, n, W);
	printf("Maximum Profit = %d\n", maxProfit);
	return 0;
}
/* OUTPUT
Maximum Profit = 220
*/
